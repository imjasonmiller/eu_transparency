-- Remove previous instance and recreate
DROP DATABASE IF EXISTS eu_transparency;
CREATE DATABASE eu_transparency;
\c eu_transparency;

-- Trigrams are used to speed up search
-- see https://www.postgresql.org/docs/10/static/pgtrgm.html
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

CREATE TABLE departments (
  department_abbreviation TEXT NOT NULL PRIMARY KEY,
  department_name         TEXT NOT NULL,
  department_description  TEXT NOT NULL
);

-- Lookup table for countries that allows us to use integers to searching for specific countries.
CREATE TABLE countries (
    country_id            INT generated by default AS identity PRIMARY KEY,
    country_code          VARCHAR(2) UNIQUE /* ISO 3166 code */
);

INSERT INTO countries (country_code) VALUES 
  ('AE'), ('AL'), ('AM'), ('AN'), ('AR'), ('AT'), ('AU'), ('AZ'), ('BA'), ('BB'), ('BE'), ('BG'),
  ('BJ'), ('BM'), ('BO'), ('BR'), ('BS'), ('BZ'), ('CA'), ('CD'), ('CH'), ('CI'), ('CL'), ('CM'),
  ('CN'), ('CO'), ('CR'), ('CY'), ('CZ'), ('DE'), ('DK'), ('DM'), ('DO'), ('EC'), ('EE'), ('EG'),
  ('ES'), ('ET'), ('FI'), ('FJ'), ('FR'), ('GB'), ('GE'), ('GH'), ('GP'), ('GR'), ('GT'), ('HK'),
  ('HR'), ('HU'), ('ID'), ('IE'), ('IL'), ('IM'), ('IN'), ('IQ'), ('IS'), ('IT'), ('JE'), ('JO'),
  ('JP'), ('KE'), ('KG'), ('KH'), ('KI'), ('KR'), ('KW'), ('KZ'), ('LA'), ('LB'), ('LI'), ('LK'),
  ('LT'), ('LU'), ('LV'), ('MA'), ('MC'), ('MD'), ('ME'), ('MK'), ('MM'), ('MQ'), ('MT'), ('MX'),
  ('MY'), ('NG'), ('NL'), ('NO'), ('NP'), ('NZ'), ('PA'), ('PH'), ('PK'), ('PL'), ('PS'), ('PT'),
  ('QA'), ('RE'), ('RO'), ('RS'), ('RU'), ('SE'), ('SG'), ('SI'), ('SK'), ('SM'), ('SN'), ('SY'),
  ('TG'), ('TH'), ('TN'), ('TR'), ('TT'), ('TW'), ('TZ'), ('UA'), ('UG'), ('US'), ('UY'), ('VE'),
  ('VN'), ('XK'), ('ZA'), ('ZW');

-- Used internally in organizations.go. Maps country names to a consistent ISO-3166 Alpha 2 code.
-- For example, "TANZANIA, RE UBLIC OF" and "TANZANIA" will both reference "TZ".
CREATE TABLE country_names (
  country_code   VARCHAR(2) NOT NULL REFERENCES countries(country_code),
  country_name   TEXT NOT NULL,
  PRIMARY KEY(country_code, country_name)
);

INSERT INTO country_names (country_code, country_name) VALUES
('AE', 'UNITED ARAB EMIRATES'), ('AL', 'ALBANIA'), ('AM', 'ARMENIA'), ('AN', 'NETHERLANDS ANTILLES'), ('AR', 'ARGENTINA'), ('AT', 'AUSTRIA'),
('AU', 'AUSTRALIA'), ('AZ', 'AZERBAIJAN'), ('BA', 'BOSNIA-HERZEGOVINA'), ('BB', 'BARBADOS'), ('BE', 'BELGIUM'), ('BG', 'BULGARIA'), ('BJ', 'BENIN'),
('BM', 'BERMUDA'), ('BO', 'BOLIVIA'), ('BR', 'BRAZIL'), ('BS', 'BAHAMAS'), ('BZ', 'BELIZE'), ('CA', 'CANADA'), ('CD', 'CONGO, DEMOCRATIC REPUBLIC OF'),
('CH', 'SWITZERLAND'), ('CI', 'COTE D''IVOIRE'), ('CL', 'CHILE'), ('CM', 'CAMEROON'), ('CN', 'CHINA'), ('CO', 'COLOMBIA'), ('CR', 'COSTA RICA'),
('CY', 'CYPRUS'), ('CZ', 'CZECH REPUBLIC'), ('DE', 'GERMANY'), ('DK', 'DENMARK'), ('DM', 'DOMINIQUE'), ('DO', 'DOMINICAN REPUBLIC'), ('EC', 'ECUADOR'),
('EE', 'ESTONIA'), ('EG', 'EGYPT'), ('ES', 'SPAIN'), ('ET', 'ETHIOPIA'), ('FI', 'FINLAND'), ('FJ', 'FIJI'), ('FR', 'FRANCE'), ('GB', 'UNITED KINGDOM'),
('GE', 'GEORGIA'), ('GH', 'GHANA'), ('GP', 'GUADELOUPE'), ('GR', 'GREECE'), ('GT', 'GUATEMALA'), ('HK', 'HONG KONG'), ('HR', 'CROATIA'), ('HU', 'HUNGARY'),
('ID', 'INDONESIA'), ('IE', 'IRELAND'), ('IL', 'ISRAEL'), ('IM', 'ISLE OF MAN'), ('IN', 'INDIA'), ('IQ', 'IRAQ'), ('IS', 'ICELAND'), ('IT', 'ITALY'),
('JE', 'JERSEY'), ('JO', 'JORDAN'), ('JP', 'JAPAN'), ('KE', 'KENYA'), ('KG', 'KYRGYZSTAN'), ('KH', 'CAMBODIA'), ('KI', 'KIRIBATI'),
('KR', 'KOREA, REPUBLIC OF'), ('KW', 'KUWAIT'), ('KZ', 'KAZAKHSTAN'), ('LA', 'LAOS, PEOPLE''S DEMOCRATIC REPUBLIC'), ('LB', 'LEBANON'),
('LI', 'LIECHTENSTEIN'), ('LK', 'SRI LANKA'), ('LT', 'LITHUANIA'), ('LU', 'LUXEMBOURG'), ('LV', 'LATVIA'), ('MA', 'MOROCCO'), ('MC', 'MONACO'),
('MD', 'MOLDOVA, REPUBLIC OF'), ('ME', 'MONTENEGRO'), ('MK', 'MACEDONIA, FORMER YUGOSLAV REPUBLIC OF'), ('MM', 'MYANMAR'), ('MQ', 'MARTINIQUE'),
('MT', 'MALTA'), ('MX', 'MEXICO'), ('MY', 'MALAYSIA'), ('NG', 'NIGERIA'), ('NL', 'NETHERLANDS'), ('NO', 'NORWAY'), ('NP', 'NEPAL'), ('NZ', 'NEW ZEALAND'),
('PA', 'PANAMA'), ('PH', 'PHILIPPINES'), ('PK', 'PAKISTAN'), ('PL', 'POLAND'), ('PS', 'PALESTINIAN OCCUPIED TERRITORY'), ('PT', 'PORTUGAL'), ('QA', 'QATAR'),
('RE', 'REUNION'), ('RO', 'ROMANIA'), ('RS', 'SERBIA'), ('RU', 'RUSSIA, FEDERATION OF'), ('SE', 'SWEDEN'), ('SG', 'SINGAPORE'), ('SI', 'SLOVENIA'), ('SK', 'SLOVAKIA'),
('SM', 'SAINT MARINO'), ('SN', 'SENEGAL'), ('SY', 'SYRIA, ARAB REPUBLIC'), ('TG', 'TOGO'), ('TH', 'THAILAND'), ('TN', 'TUNISIA'), ('TR', 'TURKEY'),
('TT', 'TRINIDAD AND TOBAGO'), ('TW', 'TAIWAN'), ('TZ', 'TANZANIA, UNITED REPUBLIC OF'), ('TZ', 'TANZANIA, UNITED RE UBLIC OF'), ('UA', 'UKRAINE'),
('UG', 'UGANDA'), ('US', 'UNITED STATES'), ('UY', 'URUGUAY'), ('VE', 'VENEZUELA'), ('VN', 'VIETNAM'), ('XK', 'KOSOVO'), ('ZA', 'SOUTH AFRICA'),
('ZW', 'ZIMBABWE');

CREATE TABLE meetings (
  -- meeting_id                  INT generated by default AS identity PRIMARY KEY,
  meeting_id                  UUID PRIMARY KEY,
  meeting_date                DATE NOT NULL,
  meeting_canceled            BOOLEAN NOT NULL DEFAULT FALSE, 
  meeting_location            TEXT NOT NULL,
  meeting_subjects            TEXT NOT NULL,
  UNIQUE(meeting_date, meeting_canceled, meeting_location, meeting_subjects)
);

CREATE TABLE organizations (
  organization_id             TEXT NOT NULL PRIMARY KEY,
  organization_name           TEXT NOT NULL,
  organization_country        INT NOT NULL REFERENCES countries(country_id),
  organization_legal_status   TEXT NOT NULL,
  organization_updated_at     TIMESTAMP WITH TIME ZONE NOT NULL,
  organization_registered_at  TIMESTAMP WITH TIME ZONE NOT NULL
);

CREATE TABLE organizations_history (
  organization_id             TEXT NOT NULL REFERENCES organizations(organization_id) ON DELETE CASCADE,
  organization_name           TEXT NOT NULL,
  organization_country        INT NOT NULL REFERENCES countries(country_id),
  organization_legal_status   TEXT NOT NULL,
  organization_updated_at     TIMESTAMP WITH TIME ZONE NOT NULL,
  organization_registered_at  TIMESTAMP WITH TIME ZONE NOT NULL,
  PRIMARY KEY(organization_id, organization_updated_at)
);

CREATE TABLE organizations_meetings (
  organization_id             TEXT NOT NULL REFERENCES organizations(organization_id) ON UPDATE CASCADE ON DELETE CASCADE,
  meeting_id                  UUID NOT NULL REFERENCES meetings(meeting_id) ON UPDATE CASCADE ON DELETE CASCADE,
  PRIMARY KEY(organization_id, meeting_id)
);

CREATE TABLE leaders (
  leader_id           UUID NOT NULL PRIMARY KEY,
  leader_name         TEXT NOT NULL,
  leader_role         TEXT NOT NULL,
  leader_country      INT NOT NULL REFERENCES countries(country_id),
  leader_department   TEXT NOT NULL REFERENCES departments(department_abbreviation)
);

CREATE TABLE members (
  member_id           UUID NOT NULL PRIMARY KEY,
  member_name         TEXT NOT NULL
);

CREATE TABLE members_roles (
  leader_id           UUID NOT NULL REFERENCES leaders(leader_id),
  member_id           UUID NOT NULL REFERENCES members(member_id),
  member_role         TEXT NOT NULL,
  PRIMARY KEY(member_id, member_role)
);

CREATE TABLE leaders_members (
  leader_id         UUID NOT NULL,
  member_id         UUID NOT NULL,
  PRIMARY KEY(leader_id, member_id)
);

CREATE TABLE leaders_meetings (
  leader_id           UUID NOT NULL REFERENCES leaders(leader_id) ON UPDATE CASCADE ON DELETE CASCADE,
  meeting_id          UUID NOT NULL REFERENCES meetings(meeting_id) ON UPDATE CASCADE ON DELETE CASCADE,
  PRIMARY KEY(leader_id, meeting_id)
);

CREATE TABLE members_meetings (
  leader_id           UUID NOT NULL REFERENCES leaders(leader_id) ON UPDATE CASCADE ON DELETE CASCADE,
  member_id           UUID NOT NULL REFERENCES members(member_id) ON UPDATE CASCADE ON DELETE CASCADE,
  meeting_id          UUID NOT NULL REFERENCES meetings(meeting_id) ON UPDATE CASCADE ON DELETE CASCADE,
  PRIMARY KEY(member_id, meeting_id)
);

CREATE INDEX index_organizations_on_name_trigram ON organizations USING GIN(organization_name gin_trgm_ops);
CREATE INDEX index_leaders_on_name_trigram ON leaders USING GIN(leader_name gin_trgm_ops);

-- Trigger that inserts updated records into organizations_history.
CREATE OR REPLACE FUNCTION fn_organizations_history() RETURNS TRIGGER AS $BODY$
  BEGIN
    IF NEW.organization_updated_at > OLD.organization_updated_at THEN
      INSERT INTO organizations_history VALUES(
        OLD.organization_id,
        OLD.organization_name,
        OLD.organization_country,
        OLD.organization_legal_status,
        OLD.organization_updated_at,
        OLD.organization_registered_at
      );
    END IF;
    RETURN NEW;
  END;
$BODY$ LANGUAGE plpgsql;

-- Attach trigger to the organizations table.
CREATE TRIGGER tg_organizations_history 
  AFTER UPDATE ON organizations
    FOR EACH ROW
      EXECUTE PROCEDURE fn_organizations_history();
